<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Sakeven&#39;s Blog</title>
    <link>https://sakeven.github.io/categories/linux/</link>
    <description>Recent content in Linux on Sakeven&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 May 2018 20:00:00 +0800</lastBuildDate><atom:link href="https://sakeven.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>fcntl 锁在 Go 中通过 execve 之后不生效的问题</title>
      <link>https://sakeven.github.io/posts/2018-05-10-fnctl/</link>
      <pubDate>Thu, 10 May 2018 20:00:00 +0800</pubDate>
      
      <guid>https://sakeven.github.io/posts/2018-05-10-fnctl/</guid>
      <description>背景 man 2 fcntl Record locks are not inherited by a child created via fork(2), but are preserved across an execve(2). 看到 fcntl 的介绍，我们想当然地认为 fcntl 的记录锁在 execve 之后都是能够保留的。 在我们使用 Go 来实现的时候，很快就</description>
    </item>
    
    <item>
      <title>/proc/locks</title>
      <link>https://sakeven.github.io/posts/2018-04-21-proc-locks/</link>
      <pubDate>Sat, 21 Apr 2018 20:00:00 +0800</pubDate>
      
      <guid>https://sakeven.github.io/posts/2018-04-21-proc-locks/</guid>
      <description>/proc 是由 Linux 内核提供的伪文件系统。 其中 /proc/locks 则是保存当前由内核锁定的文件的相关信息。 详解 $ cat /proc/locks 1: POSIX ADVISORY READ 4255 08:01:395841 128 128 2: POSIX ADVISORY READ 4255 08:01:395663 1073741826 1073742335 3: OFDLCK ADVISORY WRITE 4254 08:01:395845 0 0 4: POSIX ADVISORY</description>
    </item>
    
    <item>
      <title>The Art of Exploitation</title>
      <link>https://sakeven.github.io/posts/2016-05-10-the-art-of-exploitation/</link>
      <pubDate>Tue, 10 May 2016 22:37:04 +0800</pubDate>
      
      <guid>https://sakeven.github.io/posts/2016-05-10-the-art-of-exploitation/</guid>
      <description>1. 栈保护 在函数内有这样一段汇编： 0x000000000040055d &amp;lt;+0&amp;gt;: push rbp 0x000000000040055e &amp;lt;+1&amp;gt;: mov rbp,rsp 0x0000000000400561 &amp;lt;+4&amp;gt;: sub rsp,0x50 . . . 0x0000000000400575 &amp;lt;+24&amp;gt;: mov rax,QWORD PTR fs:0x28 0x000000000040057e &amp;lt;+33&amp;gt;: mov QWORD PTR [rbp-0x8],rax . . . 0x000000000040058f &amp;lt;+50&amp;gt;: mov rax,QWORD PTR [rbp-0x8] 0x0000000000400593 &amp;lt;+54&amp;gt;: xor rax,QWORD PTR fs:0x28 0x000000000040059c &amp;lt;+63&amp;gt;: je 0x4005a3 &amp;lt;test_function+70&amp;gt; 0x000000000040059e &amp;lt;+65&amp;gt;: call 0x400440 &amp;lt;__stack_chk_fail@plt&amp;gt; 0x00000000004005a3 &amp;lt;+70&amp;gt;:</description>
    </item>
    
    <item>
      <title>GDB</title>
      <link>https://sakeven.github.io/posts/2016-05-09-gdb/</link>
      <pubDate>Mon, 09 May 2016 15:18:01 +0800</pubDate>
      
      <guid>https://sakeven.github.io/posts/2016-05-09-gdb/</guid>
      <description>设置 intel 格式汇编 在 ~/.gdbinit中： set disassembly intel 查看寄存器 (gdb) i r rax 0x4005a5 4195749 rbx 0x0 0 rcx 0x0 0 rdx 0x7fffffffe628 140737488348712 rsi 0x7fffffffe618 140737488348696 rdi 0x1 1 rbp 0x7fffffffe530 0x7fffffffe530 rsp 0x7fffffffe530 0x7fffffffe530 r8 0x7ffff7dd4e80 140737351863936 r9 0x7ffff7dea560 140737351951712 r10 0x7fffffffe3c0 140737488348096 r11 0x7ffff7a36dd0 140737348070864 r12 0x400470 4195440</description>
    </item>
    
    <item>
      <title>Qemu 安装</title>
      <link>https://sakeven.github.io/posts/2016-04-29-qemu_install/</link>
      <pubDate>Fri, 29 Apr 2016 15:08:36 +0800</pubDate>
      
      <guid>https://sakeven.github.io/posts/2016-04-29-qemu_install/</guid>
      <description>qemu 在 ubuntu 14.04 下安装 qemu 的 README.md 写的安装方式过于简略。实际上 qemu 的编译安装比较麻烦，需要下载一些依赖。 以下是安装依赖，并配置编译安装 qemu 到 /usr/local/bin wget http://wiki.qemu-project.org/download/qemu-2.6.0-rc3.tar.bz2 tar jxvf qemu-2.6.0-rc3.tar.bz2 cd qemu-2.6.0-rc3/ sudo</description>
    </item>
    
    <item>
      <title>CFS Scheduler [译]</title>
      <link>https://sakeven.github.io/posts/2015-10-29-cfs/</link>
      <pubDate>Thu, 29 Oct 2015 19:00:00 +0800</pubDate>
      
      <guid>https://sakeven.github.io/posts/2015-10-29-cfs/</guid>
      <description>原文：CFS Scheduler 1. 概览 CFS 意为 “完全公平调度器”，是一种新的“桌面”进程调度器，由 Ingo Molnar 实现，在 linux 2.6.23 中并入内核。 它是对之前的 vanilla 调度器的分时调度策略</description>
    </item>
    
    <item>
      <title>Sched Nice Design[译]</title>
      <link>https://sakeven.github.io/posts/2015-10-29-nice/</link>
      <pubDate>Thu, 29 Oct 2015 19:00:00 +0800</pubDate>
      
      <guid>https://sakeven.github.io/posts/2015-10-29-nice/</guid>
      <description>原文： Sched Nice Design 这份文档解释了在新的 Linux 调度器中更新和改善的优先级实现思想。 优先级曾经在 Linux 上一直非常薄弱，人们一直地纠缠我们，让我们实现优先级 +19 的</description>
    </item>
    
    <item>
      <title>Linux 命令行</title>
      <link>https://sakeven.github.io/posts/2015-08-28-bash/</link>
      <pubDate>Fri, 28 Aug 2015 19:00:00 +0800</pubDate>
      
      <guid>https://sakeven.github.io/posts/2015-08-28-bash/</guid>
      <description>echo： 输出一段字符串 与通配符使用可以输出当前目录下的制定文件 find： 查找文件，基本格式 find [目录] [选项] [操作]，如 find . -name &#39;*.go&#39;</description>
    </item>
    
  </channel>
</rss>
